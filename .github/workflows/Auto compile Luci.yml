#
# Copyright (c) 2022-2025 SMALLPROGRAM <https://github.com/smallprogram>
# Description: Auto compile (Luci only)
#
name: "Auto compile luci-app-passwall (Luci only)"

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'

env:
  TZ: Asia/Shanghai
  passwall: ${{ github.repository }}

jobs:
  job_check:
    name: Check Version
    runs-on: ubuntu-latest
    outputs:
      passwall_version: ${{ steps.check_version.outputs.latest_version }}
      has_update: ${{ steps.check_version.outputs.has_update }}
      prerelease: ${{ steps.check_version.outputs.prerelease }}
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          fetch-depth: 0
          ref: ${{ github.ref_name }}

      - name: Check version
        id: check_version
        env:
          url_tags: https://api.github.com/repos/${{ env.passwall }}/tags
        run: |
          cd luci-app-passwall
          latest_version=$(awk -F ':=' '/PKG_VERSION|PKG_RELEASE/ {print $2}' Makefile | sed ':a;N;s/\$(PKG_VERSION)-//;s/\n$//;s/\n/-/;ba')
          has_update=$([ -z "$(wget -qO- -t1 -T2 ${{env.url_tags}} | grep \"${latest_version}\")" ] && echo true || echo false)
          prerelease=$([ "${{ github.ref_name }}" == "main" ] && echo false || echo true)
          echo "latest_version=${latest_version}" >> $GITHUB_OUTPUT
          echo "has_update=${has_update}" >> $GITHUB_OUTPUT
          echo "prerelease=${prerelease}" >> $GITHUB_OUTPUT
          echo "latest_version: ${latest_version}"
          echo "has_update: ${has_update}"
          echo "prerelease: ${prerelease}"

      - name: Prepare release
        if: steps.check_version.outputs.has_update == 'true'
        run: |
          echo "## :mega:Update content" >> release.txt
          echo "![](https://img.shields.io/github/downloads/${{ env.passwall }}/${{steps.check_version.outputs.latest_version}}/total?style=flat-square)" >> release.txt
          echo "### Passwall Info" >> release.txt
          echo "**:minidisc: Passwall Version: ${{steps.check_version.outputs.latest_version}}**" >> release.txt
          touch release.txt

      - name: Generate new tag & release
        if: steps.check_version.outputs.has_update == 'true'
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{steps.check_version.outputs.latest_version}}
          target_commitish: ${{ github.ref_name }}
          prerelease: ${{steps.check_version.outputs.prerelease}}
          body_path: release.txt

  job_build_luci:
    name: Build luci-app-passwall [Luci ${{ matrix.luci_ver }}]
    needs: job_check
    if: needs.job_check.outputs.has_update == 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - sdk_ver: "21.02"
            luci_ver: "19.07"
            sdk_url: https://downloads.openwrt.org/releases/21.02.7/targets/x86/64/openwrt-sdk-21.02.7-x86-64_gcc-8.4.0_musl.Linux-x86_64.tar.xz

          - sdk_ver: "24.10"
            luci_ver: "24.10"
            sdk_url: https://downloads.openwrt.org/releases/24.10.1/targets/x86/64/openwrt-sdk-24.10.1-x86-64_gcc-13.3.0_musl.Linux-x86_64.tar.zst

    steps:
      - name: Install packages
        run: |
          sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /usr/local/lib/android
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
            bzip2 ccache clang cmake cpio curl device-tree-compiler ecj fastjar flex gawk gettext gcc-multilib \
            g++-multilib git gnutls-dev gperf haveged help2man intltool lib32gcc-s1 libc6-dev-i386 libelf-dev \
            libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses-dev libpython3-dev \
            libreadline-dev libssl-dev libtool libyaml-dev libz-dev lld llvm lrzsz mkisofs msmtp nano \
            ninja-build p7zip p7zip-full patch pkgconf python3 python3-pip python3-ply python3-docutils \
            python3-pyelftools qemu-utils re2c rsync scons squashfs-tools subversion swig texinfo uglifyjs \
            upx-ucl unzip vim wget xmlto xxd zlib1g-dev zstd
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean

      - name: Download & unpack SDK
        run: |
          wget ${{ matrix.sdk_url }}
          file_name=$(echo ${{ matrix.sdk_url }} | awk -F/ '{print $NF}')
          mkdir sdk
          if [[ $file_name == *.tar.xz ]]; then
            tar -xJf $file_name -C ./sdk --strip-components=1
          elif [[ $file_name == *.tar.zst ]]; then
            tar --zstd -x -f $file_name -C ./sdk --strip-components=1
          else
            echo "Unsupported file format: $file_name"
            exit 1
          fi

      - name: Configure feeds (Luci only)
        run: |
          cd sdk
          cat > feeds.conf.default << 'EOF'
          src-git passwall https://github.com/${{ env.passwall }}.git;${{ github.ref_name }}
          src-git base https://github.com/openwrt/openwrt.git;openwrt-${{ matrix.sdk_ver }}
          src-git packages https://github.com/openwrt/packages.git;openwrt-${{ matrix.sdk_ver }}
          src-git luci https://github.com/openwrt/luci.git;openwrt-${{ matrix.luci_ver }}
          src-git routing https://github.com/openwrt/routing.git;openwrt-${{ matrix.sdk_ver }}
          src-git telephony https://github.com/openwrt/telephony.git;openwrt-${{ matrix.sdk_ver }}
          EOF
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: (Optional) SSH connection to Actions
        uses: mxschmitt/action-tmate@v3.13
        if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')

      - name: Compile luci-app-passwall
        id: compile
        run: |
          cd sdk
          # 只选 Luci 相关
          {
            echo "CONFIG_ALL_NONSHARED=n"
            echo "CONFIG_ALL_KMODS=n"
            echo "CONFIG_ALL=n"
            echo "CONFIG_AUTOREMOVE=n"
            echo "CONFIG_SIGNED_PACKAGES=n"
            echo "CONFIG_LUCI_LANG_zh_Hans=y"
            echo "CONFIG_PACKAGE_luci-app-passwall=m"
          } > .config

          make defconfig
          echo "make package/luci-app-passwall/{clean,compile} -j$(nproc)"
          make package/luci-app-passwall/{clean,compile} -j"$(nproc)" V=s

          # 收集输出
          arch_dir=$(ls -d bin/packages/* | head -n1)
          feed_dir="${arch_dir}/passwall"
          if [ ! -d "$feed_dir" ]; then
            echo "Output dir not found: $feed_dir"
            ls -R bin || true
            exit 2
          fi

          mv "$feed_dir" ../
          make clean
          rm -f .config .config.old
          echo "status=success" >> $GITHUB_OUTPUT
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV

      - name: Rename artifacts with luci version prefix
        if: steps.compile.outputs.status == 'success'
        run: |
          cd passwall
          for f in *.ipk; do
            mv "$f" "luci-${{ matrix.luci_ver }}_${f}"
          done

      - name: Upload Luci ipks to release
        uses: softprops/action-gh-release@v2
        if: steps.compile.outputs.status == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{needs.job_check.outputs.passwall_version}}
          files: passwall/*.ipk
