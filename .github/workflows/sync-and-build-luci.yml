name: Sync upstream & Build luci-app-passwall (API/3h)

on:
  schedule:
    - cron: "0 */3 * * *"      # 每3小时检查一次
  workflow_dispatch: {}         # 支持手动触发

env:
  TZ: Asia/Shanghai
  TARGET_BRANCH: main            # 需要同步/构建的分支

permissions:
  contents: write                # merge-upstream & 发布 Release 需要

concurrency:
  group: passwall-api-build
  cancel-in-progress: true

jobs:
  sync_upstream:
    name: "Sync fork with upstream (API)"
    runs-on: ubuntu-latest
    outputs:
      updated: ${{ steps.sync.outputs.updated }}
      message: ${{ steps.sync.outputs.msg }}
    steps:
      - name: "Install jq"
        run: |
          sudo apt-get -qq update
          sudo apt-get -qq install -y jq

      - name: "Checkout (full)"
        uses: actions/checkout@v4
        with:
          ref: ${{ env.TARGET_BRANCH }}
          fetch-depth: 0

      - name: "Sync via GitHub API (merge-upstream)"
        id: sync
        shell: bash
        run: |
          set -euo pipefail
          echo "Syncing branch: ${TARGET_BRANCH}"
          http_code=$(curl -sS -L -o resp.json -w "%{http_code}" \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/${{ github.repository }}/merge-upstream" \
            -d "{\"branch\":\"${TARGET_BRANCH}\"}")

          msg=$(jq -r '.message // ""' resp.json)
          merge_type=$(jq -r '.merge_type // ""' resp.json)

          echo "HTTP: $http_code"
          echo "Message: $msg"
          echo "Merge-Type: $merge_type"

          # 200 表示调用成功；fast-forward 或 merge 都说明确有新提交
          if [ "$http_code" = "200" ]; then
            case "$merge_type" in
              fast-forward|merge)
                echo "updated=true" >> "$GITHUB_OUTPUT"
                ;;
              already-up-to-date|"")
                echo "updated=false" >> "$GITHUB_OUTPUT"
                ;;
              *)
                echo "updated=false" >> "$GITHUB_OUTPUT"
                echo "Unknown merge_type: $merge_type"
                ;;
            esac
          else
            echo "updated=false" >> "$GITHUB_OUTPUT"
          fi
          echo "msg=$msg" >> "$GITHUB_OUTPUT"

  build_luci:
    name: "Build luci-app-passwall [Luci ${{ matrix.luci_ver }}]"
    needs: sync_upstream
    if: needs.sync_upstream.outputs.updated == 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - sdk_ver: "21.02"
            luci_ver: "19.07"
            sdk_url: "https://downloads.openwrt.org/releases/21.02.7/targets/x86/64/openwrt-sdk-21.02.7-x86-64_gcc-8.4.0_musl.Linux-x86_64.tar.xz"
          - sdk_ver: "24.10"
            luci_ver: "24.10"
            sdk_url: "https://downloads.openwrt.org/releases/24.10.1/targets/x86/64/openwrt-sdk-24.10.1-x86-64_gcc-13.3.0_musl.Linux-x86_64.tar.zst"

    steps:
      - name: "Checkout repo (for reading upstream version)"
        uses: actions/checkout@v4
        with:
          ref: ${{ env.TARGET_BRANCH }}
          fetch-depth: 0

      - name: "Read Passwall version from repo (for tag)"
        id: ver
        shell: bash
        run: |
          ver=$(awk -F ':=' '/^PKG_VERSION/{gsub(/\r/,"");print $2}' luci-app-passwall/Makefile | tr -d '[:space:]')
          rel=$(awk -F ':=' '/^PKG_RELEASE/{gsub(/\r/,"");print $2}' luci-app-passwall/Makefile | tr -d '[:space:]')
          echo "tag=${ver}-${rel}" >> "$GITHUB_OUTPUT"
          echo "Release tag will be: ${ver}-${rel}"

      - name: "Show sync message"
        shell: bash
        run: |
          echo "Upstream sync result: ${{ needs.sync_upstream.outputs.message }}"

      - name: "Install build dependencies"
        shell: bash
        run: |
          sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /usr/local/lib/android
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
            bzip2 ccache clang cmake cpio curl device-tree-compiler ecj fastjar flex gawk gettext gcc-multilib \
            g++-multilib git gnutls-dev gperf haveged help2man intltool lib32gcc-s1 libc6-dev-i386 libelf-dev \
            libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses-dev libpython3-dev \
            libreadline-dev libssl-dev libtool libyaml-dev libz-dev lld llvm lrzsz mkisofs msmtp nano \
            ninja-build p7zip p7zip-full patch pkgconf python3 python3-pip python3-ply python3-docutils \
            python3-pyelftools qemu-utils re2c rsync scons squashfs-tools subversion swig texinfo uglifyjs \
            upx-ucl unzip vim wget xmlto xxd zlib1g-dev zstd
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean

      - name: "Download & unpack SDK"
        shell: bash
        run: |
          wget "${{ matrix.sdk_url }}"
          file_name=$(echo "${{ matrix.sdk_url }}" | awk -F/ '{print $NF}')
          mkdir sdk
          if [[ $file_name == *.tar.xz ]]; then
            tar -xJf "$file_name" -C ./sdk --strip-components=1
          elif [[ $file_name == *.tar.zst ]]; then
            tar --zstd -x -f "$file_name" -C ./sdk --strip-components=1
          else
            echo "Unsupported file format: $file_name"
            exit 1
          fi

      - name: "Configure feeds (Luci only)"
        shell: bash
        run: |
          cd sdk
          cat > feeds.conf.default << 'EOF'
          src-git passwall https://github.com/${{ github.repository }}.git;${{ env.TARGET_BRANCH }}
          src-git base https://github.com/openwrt/openwrt.git;openwrt-${{ matrix.sdk_ver }}
          src-git packages https://github.com/openwrt/packages.git;openwrt-${{ matrix.sdk_ver }}
          src-git luci https://github.com/openwrt/luci.git;openwrt-${{ matrix.luci_ver }}
          src-git routing https://github.com/openwrt/routing.git;openwrt-${{ matrix.sdk_ver }}
          src-git telephony https://github.com/openwrt/telephony.git;openwrt-${{ matrix.sdk_ver }}
          EOF
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: "Auto-bump PKG_RELEASE (build-only)"
        shell: bash
        run: |
          cd sdk
          # 仅在构建目录里改，仓库不改；确保每次安装版本唯一且递增
          REL="$(date -u +%Y%m%d%H%M)${{ github.run_number }}"
          sed -i -E "s/^(PKG_RELEASE\s*:?=).*/\1 ${REL}/" feeds/passwall/luci-app-passwall/Makefile
          echo "New PKG_RELEASE=${REL}"
          grep -nE '^(PKG_NAME|PKG_VERSION|PKG_RELEASE)\s*:?=' feeds/passwall/luci-app-passwall/Makefile

      - name: "Compile luci-app-passwall"
        shell: bash
        run: |
          cd sdk
          cat > .config << 'CFG'
          CONFIG_ALL_NONSHARED=n
          CONFIG_ALL_KMODS=n
          CONFIG_ALL=n
          CONFIG_AUTOREMOVE=n
          CONFIG_SIGNED_PACKAGES=n
          CONFIG_LUCI_LANG_zh_Hans=y
          CONFIG_PACKAGE_luci-app-passwall=m
          CFG

          make defconfig
          make package/luci-app-passwall/{clean,compile} -j"$(nproc)" V=s

          arch_dir=$(ls -d bin/packages/* | head -n1)
          feed_dir="${arch_dir}/passwall"
          mkdir -p ../output
          mv "$feed_dir"/*.ipk ../output/

          # 统一前缀，避免不同 run 的产物重名
          cd ../output && for f in *.ipk; do mv "$f" "luci-${{ matrix.luci_ver }}_${{ github.run_number }}_$f"; done

      - name: "Upload artifacts"
        uses: actions/upload-artifact@v4
        with:
          name: luci-ipks-${{ matrix.luci_ver }}
          path: output/*.ipk
          if-no-files-found: error

      - name: "Prepare release notes"
        shell: bash
        run: |
          {
            echo "## :mega: Update content"
            echo "### Passwall Info"
            echo "**:minidisc: Passwall Version: ${{ steps.ver.outputs.tag }}**"
            echo ""
            echo "Auto-bumped PKG_RELEASE during build to ensure unique installable version."
          } > release.txt

      - name: "Upload IPKs to Release (auto-create if missing)"
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.ver.outputs.tag }}           # 例如：25.8.31-1
          target_commitish: ${{ env.TARGET_BRANCH }}
          generate_release_notes: false
          body_path: release.txt
          files: output/*.ipk
