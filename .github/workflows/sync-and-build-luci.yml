name: "Sync upstream & Build luci-app-passwall (auto bump release)"

on:
  schedule:
    - cron: "0 */6 * * *"     # 每 6 小时检查一次上游
  workflow_dispatch: {}        # 也支持手动触发

env:
  TZ: Asia/Shanghai
  TARGET_BRANCH: main          # 需要同步的分支（按需修改）

permissions:
  contents: write              # 调用 merge-upstream + 推送需要这个权限

jobs:
  sync_upstream:
    name: Sync fork with upstream
    runs-on: ubuntu-latest
    outputs:
      updated: ${{ steps.sync.outputs.updated }}
      message: ${{ steps.sync.outputs.msg }}
    steps:
      - name: Install jq
        run: |
          sudo apt-get -qq update
          sudo apt-get -qq install -y jq

      - name: Checkout (full)
        uses: actions/checkout@v4
        with:
          ref: ${{ env.TARGET_BRANCH }}
          fetch-depth: 0

      - name: Sync via GitHub API (merge-upstream)
        id: sync
        run: |
          set -e
          echo "Syncing branch: ${TARGET_BRANCH}"
          http_code=$(curl -sS -L -o resp.json -w "%{http_code}" \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/${{ github.repository }}/merge-upstream" \
            -d "{\"branch\":\"${TARGET_BRANCH}\"}")

          msg=$(jq -r '.message // ""' resp.json)
          merge_type=$(jq -r '.merge_type // ""' resp.json)

          echo "HTTP: $http_code"
          echo "Message: $msg"
          echo "Merge-Type: $merge_type"

          # 200 且 fast-forward 代表确实同步到了新提交
          if [ "$http_code" = "200" ] && echo "$merge_type" | grep -qi "fast-forward"; then
            echo "updated=true" >> $GITHUB_OUTPUT
          else
            echo "updated=false" >> $GITHUB_OUTPUT
          fi
          echo "msg=$msg" >> $GITHUB_OUTPUT

      # —— 如果你的仓库不是 fork，或接口不可用，可改用下方“git 方案”（取消注释并填写上游地址）——
      # - name: Fallback: sync via git (non-fork or conflict case)
      #   if: steps.sync.outputs.updated == ''
      #   run: |
      #     set -e
      #     git config user.name  "github-actions[bot]"
      #     git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
      #     git remote add upstream https://github.com/<UPSTREAM_OWNER>/<UPSTREAM_REPO>.git
      #     git fetch upstream ${{ env.TARGET_BRANCH }}
      #     if [ "$(git rev-parse HEAD)" = "$(git rev-parse FETCH_HEAD)" ]; then
      #       echo "updated=false" >> $GITHUB_OUTPUT
      #       exit 0
      #     fi
      #     git merge --ff-only FETCH_HEAD
      #     git push origin ${{ env.TARGET_BRANCH }}
      #     echo "updated=true" >> $GITHUB_OUTPUT

  build_luci:
    name: Build luci-app-passwall [Luci ${{ matrix.luci_ver }}]
    needs: sync_upstream
    if: needs.sync_upstream.outputs.updated == 'true'   # 仅在有上游更新时才构建
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - sdk_ver: "21.02"
            luci_ver: "19.07"
            sdk_url: https://downloads.openwrt.org/releases/21.02.7/targets/x86/64/openwrt-sdk-21.02.7-x86-64_gcc-8.4.0_musl.Linux-x86_64.tar.xz
          - sdk_ver: "24.10"
            luci_ver: "24.10"
            sdk_url: https://downloads.openwrt.org/releases/24.10.1/targets/x86/64/openwrt-sdk-24.10.1-x86-64_gcc-13.3.0_musl.Linux-x86_64.tar.zst

    steps:
      - name: Show sync message
        run: echo "Upstream sync result: ${{ needs.sync_upstream.outputs.message }}"

      - name: Install build dependencies
        run: |
          sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /usr/local/lib/android
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
            bzip2 ccache clang cmake cpio curl device-tree-compiler ecj fastjar flex gawk gettext gcc-multilib \
            g++-multilib git gnutls-dev gperf haveged help2man intltool lib32gcc-s1 libc6-dev-i386 libelf-dev \
            libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses-dev libpython3-dev \
            libreadline-dev libssl-dev libtool libyaml-dev libz-dev lld llvm lrzsz mkisofs msmtp nano \
            ninja-build p7zip p7zip-full patch pkgconf python3 python3-pip python3-ply python3-docutils \
            python3-pyelftools qemu-utils re2c rsync scons squashfs-tools subversion swig texinfo uglifyjs \
            upx-ucl unzip vim wget xmlto xxd zlib1g-dev zstd
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean

      - name: Download & unpack SDK
        run: |
          wget ${{ matrix.sdk_url }}
          file_name=$(echo ${{ matrix.sdk_url }} | awk -F/ '{print $NF}')
          mkdir sdk
          if [[ $file_name == *.tar.xz ]]; then
            tar -xJf $file_name -C ./sdk --strip-components=1
          elif [[ $file_name == *.tar.zst ]]; then
            tar --zstd -x -f $file_name -C ./sdk --strip-components=1
          else
            echo "Unsupported file format: $file_name"
            exit 1
          fi

      - name: Configure feeds (Luci only)
        run: |
          cd sdk
          cat > feeds.conf.default << 'EOF'
          src-git passwall https://github.com/${{ github.repository }}.git;${{ env.TARGET_BRANCH }}
          src-git base https://github.com/openwrt/openwrt.git;openwrt-${{ matrix.sdk_ver }}
          src-git packages https://github.com/openwrt/packages.git;openwrt-${{ matrix.sdk_ver }}
          src-git luci https://github.com/openwrt/luci.git;openwrt-${{ matrix.luci_ver }}
          src-git routing https://github.com/openwrt/routing.git;openwrt-${{ matrix.sdk_ver }}
          src-git telephony https://github.com/openwrt/telephony.git;openwrt-${{ matrix.sdk_ver }}
          EOF
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Auto-bump PKG_RELEASE (build-only)
        run: |
          cd sdk
          # 注意：在 SDK 中路径是 feeds/passwall/luci-app-passwall/Makefile
          REL="$(date -u +%Y%m%d%H%M)${{ github.run_number }}"
          sed -i -E "s/^(PKG_RELEASE\s*:?=).*/\1 ${REL}/" feeds/passwall/luci-app-passwall/Makefile
          echo "New PKG_RELEASE=${REL}"
          grep -nE '^(PKG_NAME|PKG_VERSION|PKG_RELEASE)\s*:?=' feeds/passwall/luci-app-passwall/Makefile

      - name: Compile luci-app-passwall
        run: |
          cd sdk
          {
            echo "CONFIG_ALL_NONSHARED=n"
            echo "CONFIG_ALL_KMODS=n"
            echo "CONFIG_ALL=n"
            echo "CONFIG_AUTOREMOVE=n"
            echo "CONFIG_SIGNED_PACKAGES=n"
            echo "CONFIG_LUCI_LANG_zh_Hans=y"
            echo "CONFIG_PACKAGE_luci-app-passwall=m"
          } > .config

          make defconfig
          make package/luci-app-passwall/{clean,compile} -j"$(nproc)" V=s

          arch_dir=$(ls -d bin/packages/* | head -n1)
          feed_dir="${arch_dir}/passwall"
          mkdir -p ../output
          mv "$feed_dir"/*.ipk ../output/

          # 统一重命名（带 luci 版本与 run 编号，避免重名）
          cd ../output && for f in *.ipk; do mv "$f" "luci-${{ matrix.luci_ver }}_${{ github.run_number }}_$f"; done

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: luci-ipks-${{ matrix.luci_ver }}
          path: output/*.ipk
          if-no-files-found: error

      # —— 如需发布 Release（夜版），取消注释下面两步 —— 
      # - name: Prepare release notes
      #   run: |
      #     echo "Synced upstream: ${{ needs.sync_upstream.outputs.message }}" > release.txt
      #     date +"Build time (Asia/Shanghai): %Y-%m-%d %H:%M:%S" >> release.txt
      # - name: Upload to Release
      #   uses: softprops/action-gh-release@v2
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     tag_name: nightly-luci
      #     prerelease: true
      #     body_path: release.txt
      #     files: output/*.ipk
